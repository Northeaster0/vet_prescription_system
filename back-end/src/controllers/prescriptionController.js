const db = require('../models/db');


const createPrescription = async (req, res) => {
    const { patient_name, diagnosis, medication, dosage, duration } = req.body;
    const user_id = req.user.id; // JWT ile doÄŸrulanmÄ±ÅŸ kullanÄ±cÄ±dan gelen ID

    try {
        // ğŸ“Œ Ä°laÃ§ adÄ±nÄ± kullanarak ilacÄ± veritabanÄ±nda bul
        const [med] = await db.query(
            "SELECT name, stock FROM medications WHERE LOWER(name) = LOWER(?)",
            [medication]
        );

        if (!med.length) {
            return res.status(400).json({ message: "Ä°laÃ§ bulunamadÄ±, lÃ¼tfen doÄŸru ismi giriniz." });
        }

        if (med[0].stock <= 0) {
            return res.status(400).json({ message: "Bu ilaÃ§ stokta yok." });
        }

        // ğŸ“Œ ReÃ§eteyi veritabanÄ±na ekle
        const [result] = await db.query(
            "INSERT INTO prescriptions (user_id, patient_name, diagnosis, medication, dosage, duration) VALUES (?, ?, ?, ?, ?, ?)",
            [user_id, patient_name, diagnosis, med[0].name, dosage, duration]
        );

        // ğŸ“Œ Stoktan 1 azalt
        await db.query(
            "UPDATE medications SET stock = stock - 1 WHERE name = ? AND stock > 0",
            [med[0].name]
        );

        res.status(201).json({ 
            message: "ReÃ§ete baÅŸarÄ±yla oluÅŸturuldu, stok gÃ¼ncellendi.",
            prescriptionId: result.insertId,
            remainingStock: med[0].stock - 1
        });

    } catch (error) {
        console.error("ğŸš¨ ReÃ§ete ekleme hatasÄ±:", error);
        res.status(500).json({ message: "ReÃ§ete eklenirken hata oluÅŸtu.", error: error.message });
    }
};


// KullanÄ±cÄ±nÄ±n kendi reÃ§etelerini listeleme
const getPrescriptions = async (req, res) => {
    const user_id = req.user.id;

    try {
        const [prescriptions] = await db.query("SELECT * FROM prescriptions WHERE user_id = ?", [user_id]);
        res.status(200).json({ prescriptions });
    } catch (error) {
        console.error("ğŸš¨ KullanÄ±cÄ± reÃ§etelerini getirme hatasÄ±:", error);
        res.status(500).json({ message: "ReÃ§eteleri Ã§ekerken hata oluÅŸtu.", error: error.message });
    }
};

// TÃ¼m reÃ§eteleri listeleme
const getAllPrescriptions = async (req, res) => {
    try {
        const [prescriptions] = await db.query("SELECT * FROM prescriptions");
        res.status(200).json({ prescriptions });
    } catch (error) {
        console.error("ğŸš¨ TÃ¼m reÃ§eteleri getirme hatasÄ±:", error);
        res.status(500).json({ message: "TÃ¼m reÃ§eteleri Ã§ekerken hata oluÅŸtu.", error: error.message });
    }
};

// ReÃ§ete ID'ye gÃ¶re getirme
const getPrescriptionById = async (req, res) => {
    const { id } = req.params;

    try {
        const [prescription] = await db.query("SELECT * FROM prescriptions WHERE id = ?", [id]);

        if (!prescription.length) {
            return res.status(404).json({ message: "ReÃ§ete bulunamadÄ±." });
        }

        res.status(200).json(prescription[0]);
    } catch (error) {
        console.error("ğŸš¨ ReÃ§ete getirme hatasÄ±:", error);
        res.status(500).json({ message: "ReÃ§ete getirilirken hata oluÅŸtu.", error: error.message });
    }
};

// ReÃ§ete gÃ¼ncelleme
const updatePrescription = async (req, res) => {
    const { patient_name, diagnosis, medication, dosage, duration } = req.body;
    const prescriptionId = req.params.id;

    try {
        const [existingPrescription] = await db.query("SELECT * FROM prescriptions WHERE id = ?", [prescriptionId]);

        if (!existingPrescription.length) {
            return res.status(404).json({ message: "ReÃ§ete bulunamadÄ±." });
        }

        await db.query(
            "UPDATE prescriptions SET patient_name = ?, diagnosis = ?, medication = ?, dosage = ?, duration = ? WHERE id = ?",
            [patient_name, diagnosis, medication, dosage, duration, prescriptionId]
        );

        res.status(200).json({ message: "ReÃ§ete baÅŸarÄ±yla gÃ¼ncellendi." });
    } catch (error) {
        console.error("ğŸš¨ ReÃ§ete gÃ¼ncelleme hatasÄ±:", error);
        res.status(500).json({ message: "ReÃ§ete gÃ¼ncellenirken hata oluÅŸtu.", error: error.message });
    }
};

// ReÃ§ete silme + Stok GÃ¼ncelleme
const deletePrescription = async (req, res) => {
    const prescriptionId = req.params.id;

    try {
        const [existingPrescription] = await db.query("SELECT * FROM prescriptions WHERE id = ?", [prescriptionId]);

        if (!existingPrescription.length) {
            return res.status(404).json({ message: "ReÃ§ete bulunamadÄ±." });
        }

        const { medication } = existingPrescription[0];

        await db.query("UPDATE medications SET stock = stock + 1 WHERE name = ?", [medication]);

        await db.query("DELETE FROM prescriptions WHERE id = ?", [prescriptionId]);

        res.status(200).json({ message: "ReÃ§ete baÅŸarÄ±yla silindi, stok gÃ¼ncellendi." });
    } catch (error) {
        console.error("ğŸš¨ ReÃ§ete silme hatasÄ±:", error);
        res.status(500).json({ message: "ReÃ§ete silinirken hata oluÅŸtu.", error: error.message });
    }
};

// Ä°laÃ§ stok bilgisi getirme
const getMedicationStock = async (req, res) => {
    const { name } = req.params;

    try {
        const [med] = await db.query("SELECT stock FROM medications WHERE name = ?", [name]);

        if (!med.length) {
            return res.status(404).json({ message: "Ä°laÃ§ bulunamadÄ±." });
        }

        res.status(200).json({ stock: med[0].stock });
    } catch (error) {
        console.error("ğŸš¨ Stok bilgisi alma hatasÄ±:", error);
        res.status(500).json({ message: "Stok bilgisi alÄ±nÄ±rken hata oluÅŸtu.", error: error.message });
    }
};

// **TÃ¼m ilaÃ§larÄ± listeleme (StoklarÄ± gÃ¶rÃ¼ntÃ¼leme)**
const getAllMedications = async (req, res) => {
    try {
        const [medications] = await db.query("SELECT * FROM medications");
        res.status(200).json(medications);
    } catch (error) {
        console.error("ğŸš¨ Stok bilgisi alma hatasÄ±:", error);
        res.status(500).json({ message: "Stok bilgisi alÄ±nÄ±rken hata oluÅŸtu.", error: error.message });
    }
};

// **FonksiyonlarÄ± dÄ±ÅŸa aktarma**
module.exports = { 
    createPrescription, 
    getPrescriptions, 
    getAllPrescriptions, 
    getPrescriptionById, 
    updatePrescription, 
    deletePrescription, 
    getMedicationStock,
    getAllMedications
};
